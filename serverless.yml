service: backend-challenge
frameworkVersion: '3'

provider:
  name: aws
  stage: dev
  runtime: nodejs20.x
  region: us-east-1
  memorySize: 128
  timeout: 20
  environment:
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_APP_CLIENT_ID: !Ref CognitoUserPoolClient
    FUSIONADOS_TABLE: FusionadosTable
    CUSTOM_DATA_TABLE: CustomDataTable
    CACHE_TABLE: CacheTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/FusionadosTable"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/CustomDataTable"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/CacheTable"
    - Effect: Allow
      Action:
        - cognito-idp:CreateUserPool
        - cognito-idp:CreateUserPoolClient
        - cognito-idp:DeleteUserPool
        - cognito-idp:DeleteUserPoolClient
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:SignUp
        - cognito-idp:AdminConfirmSignUp
      Resource:
        - "arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/*"
  logs:
    restApi: true
    role: serverlessApiGatewayCloudWatchRole
    frameworkLambda: true

functions:
  fusionados:
    handler: src/fusionados/infrastructure/controllers/FusionadosController.handler
    events:
      - http:
          path: fusionados
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  almacenar:
    handler: src/users/infrastructure/controllers/AlmacenarController.handler
    events:
      - http:
          path: almacenar
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  historial:
    handler: src/fusionados/infrastructure/controllers/HistorialController.handler
    events:
      - http:
          path: historial
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  login:
    handler: src/auth/infrastructure/controllers/LoginController.handler
    events:
      - http:
          path: login
          method: post
  signup:
    handler: src/auth/infrastructure/controllers/SignupController.handler
    events:
      - http:
          path: signup
          method: post

plugins:
  - serverless-offline
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node20'
    platform: 'node'
    concurrency: 10

resources:
  Resources:
    FusionadosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: FusionadosTable
        AttributeDefinitions:
          - AttributeName: partitionKey
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
        KeySchema:
          - AttributeName: partitionKey
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    CustomDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CustomDataTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CacheTable
        AttributeDefinitions:
          - AttributeName: cacheKey
            AttributeType: S
        KeySchema:
          - AttributeName: cacheKey
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPoolAuthorizer
        Type: COGNITO_USER_POOLS
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}
